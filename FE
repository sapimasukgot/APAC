//_layout.jsx
import { useColorScheme } from "@/hooks/useColorScheme";
import { ThemeProvider } from "@react-navigation/native";
import { useFonts } from "expo-font";
import { Stack } from "expo-router";
import { StatusBar } from "expo-status-bar";
import "react-native-reanimated";
import LoadingScreenAwal from "../LoadingScreenAwal";

export default function RootLayout() {
  const colorScheme = useColorScheme();
  const [loaded] = useFonts({
    SpaceMono: require("../../assets/fonts/SpaceMono-Regular.ttf"),
  });

  if (!loaded) return <LoadingScreenAwal/>;
  const backgroundColor = colorScheme === "dark" ? "#000":"#fff";
  
  return (
    <ThemeProvider value={backgroundColor}>
      <Stack>
        <Stack.Screen name="index" options={{headerShown: false}} />
        <Stack.Screen name="explore" options={{ headerShown: false }} />
        <Stack.Screen name="Operation" options={{ headerShown: false }} />
        <Stack.Screen name="not-found" options={{ title: 'Oops!' }} />
      </Stack>
      <StatusBar style="auto" />
    </ThemeProvider>
  );
}

//LoadingScreenAwal.jsx
import { useRouter } from "expo-router";
import React, { useEffect } from "react";
import { ActivityIndicator, StyleSheet, Text, View } from "react-native";

export default function LoadingScreenAwal() {
  const router = useRouter();

  useEffect(() => {
    const loadingTime = setTimeout(() => {
      router.replace("/index");
    }, 3000);
    return () => clearTimeout(loadingTime);
  }, []);
  
  return (
    <View style={styles.container}>
      <ActivityIndicator size="large" color="#2196F3" />
      <Text style={styles.text}>SABAR</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  text: {
    fontSize: 24,
    marginTop: 20,
    fontWeight: 'bold',
  }
});

//Awal.jsx
import { NavigationContainer, NavigationIndependentTree } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import React from "react";
import LoginScreen from "../explore";
import index from "../index";
import LoadingScreenAwal from "../LoadingScreenAwal";
import Operation from "../Operation.jsx";


const Stack = createNativeStackNavigator();
export default function Awal(){
    return(
        <NavigationIndependentTree>
            <NavigationContainer>
                <Stack.Navigator 
                    initialRouteName="LoadingScreenAwal" 
                    screenOptions={{
                        headerShown: false  
                    }}
                >
                    <Stack.Screen name="LoadingScreenAwal" component={LoadingScreenAwal} />
                    <Stack.Screen name="index" component={index}/>
                    <Stack.Screen name="explore" component={LoginScreen} />
                    <Stack.Screen name="Operation" component={Operation}/>                    
                </Stack.Navigator>
            </NavigationContainer>
        </NavigationIndependentTree>
    )
}

//Operation.jsx
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { Button, FlatList, SafeAreaView, StyleSheet, Text, TextInput, View } from 'react-native';

export default function Operation() {
  const router = useRouter();
  const [messages, setMessages] = useState([
    { id: 0, sender: 'ai', text: 'Hello! How can I help you today?' }
  ]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);

  const getDummyAIResponse = (userInput) => {
    if (userInput.toLowerCase().includes('hello')) {
      return 'Hello there! Nice to meet you.';
    } else if (userInput.toLowerCase().includes('how are you')) {
      return 'I\'m doing well, thank you for asking!';
    } else {
      return 'I\'m still learning to respond to that. Can you try something else?';
    }
  };

  const sendMessage = () => {
    if (!input.trim()) return;

    const userMessage = { id: messages.length, sender: 'user', text: input };
    setMessages([...messages, userMessage]);
    setInput('');
    setLoading(true);

    setTimeout(() => {
      const aiReply = getDummyAIResponse(input);
      const aiMessage = {
        id: messages.length + 1,
        sender: 'ai',
        text: aiReply,
      };
      setMessages(prev => [...prev, aiMessage]);
      setLoading(false);
    }, 1000);
  };

  const renderItem = ({ item }) => (
    <View
      style={[
        styles.message,
        item.sender === 'user' ? styles.userMessage : styles.aiMessage,
      ]}
    >
      <Text>{item.text}</Text>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Button title="Back" onPress={() => router.back()} />
        <Text style={styles.headerTitle}>Chat Assistant</Text>
        <View style={{width: 50}} />
      </View>
      
      <FlatList
        data={messages}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderItem}
        contentContainerStyle={styles.chatContainer}
      />
      
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          value={input}
          onChangeText={setInput}
          placeholder="Type a message..."
        />
        <Button title={loading ? "..." : "Send"} onPress={sendMessage} disabled={loading} />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  chatContainer: { padding: 10 },
  message: {
    padding: 10,
    marginVertical: 4,
    maxWidth: '80%',
    borderRadius: 10,
  },
  userMessage: {
    backgroundColor: '#DCF8C6',
    alignSelf: 'flex-end',
  },
  aiMessage: {
    backgroundColor: '#ECECEC',
    alignSelf: 'flex-start',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 10,
    borderTopColor: '#ddd',
    borderTopWidth: 1,
  },
  input: {
    flex: 1,
    borderColor: '#ccc',
    borderWidth: 1,
    marginRight: 10,
    paddingHorizontal: 10,
    borderRadius: 5,
  },
});

//Index.jsx
import { useRouter } from "expo-router";
import React, { useRef, useState } from "react";
import {
  Dimensions,
  FlatList,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

const { width } = Dimensions.get("window");

const slides = [
  { key: "1", title: "Halo", content: "bbbbb" },
  { key: "2", title: "hal 2", content: "bbbbbbbb" },
  { key: "3", title: "hal 3", content: "nbvfthnbvfgyhjn" },
  { key: "4", title: "hal 4", content: "nbvfrtyjkgf" },
  { key: "5", isLogin: true },
];

export default function Index() {
  const [currentPage, setCurrentPage] = useState(0);
  const scrollViewRef = useRef(null);
  const router = useRouter();

  const handleScroll = (event) => {
    const offSetX = event.nativeEvent.contentOffset.x;
    const pageIndex = Math.round(offSetX / width);
    setCurrentPage(pageIndex);
  };

  const handleSkip = () => {
    const targetIndex = slides.length - 1;
    setCurrentPage(targetIndex);
    scrollViewRef.current?.scrollToOffset({ offset: targetIndex * width, animated: false });
  };

  return (
    <View style={{ flex: 1 }}>
      <FlatList
        ref={scrollViewRef}
        data={slides}
        keyExtractor={(item) => item.key}
        horizontal
        pagingEnabled
        showsHorizontalScrollIndicator={false}
        onScroll={handleScroll}
        scrollEventThrottle={16}
        renderItem={({ item }) => {
          if (item.isLogin) {
            return (
              <View style={{ width, flex: 1, justifyContent: "center", alignItems: "center" }}>
                <Text style={styles.MegaText}>WELCOME</Text>

                <TouchableOpacity 
                style={styles.loginButton} 
                onPress={()=>router.push("/explore")}>
                  <Text style={styles.loginButtonText}>Login</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={styles.createButton}
                  onPress={() => router.push("/create-account")}
                >
                  <Text style={styles.createButtonText}>Create Account</Text>
                </TouchableOpacity>
              </View>
            );
          }
          return (
            <ScrollView
              contentContainerStyle={{
                width,
                justifyContent: "center",
                alignItems: "center",
                padding: 20,
              }}
            >
              <Text style={styles.title}>{item.title}</Text>
              <Text style={styles.content}>{item.content}</Text>
            </ScrollView>
          );
        }}
      />

      <View style={styles.pagination}>
        {slides.map((_, index) => (
          <View
            key={index}
            style={[styles.dot, { opacity: index === currentPage ? 1 : 0.3 }]}
          />
        ))}
      </View>

      <TouchableOpacity style={styles.skipButton} onPress={handleSkip} >
        <Text style={styles.skipButtonText}>Skip</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "black",
    marginBottom: 10,
  },
  content: {
    fontSize: 16,
    color: "black",
    textAlign: "center",
  },
  pagination: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
  },
  dot: {
    height: 10,
    width: 10,
    borderRadius: 5,
    backgroundColor: "black",
    margin: 5,
  },
  skipButton: {
    position: "absolute",
    top: 40,
    right: 20,
    padding: 10,
  },
  skipButtonText: {
    color: "blue",
    fontWeight: "bold",
  },
  loginButton: {
    backgroundColor: "#2196F3",
    padding: 15,
    borderRadius: 10,
    width: "80%",
    marginTop: 20,
  },
  loginButtonText: {
    color: "white",
    textAlign: "center",
    fontWeight: "bold",
    fontSize: 16,
  },
  createButton: {
    backgroundColor: "green",
    padding: 15,
    borderRadius: 10,
    width: "80%",
    marginTop: 15,
  },
  createButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
    textAlign: "center",
  },
  MegaText: {
    fontSize: 48,
    textAlign: "center",
  },
});

//explore.jsx
import { useRouter } from "expo-router";
import React, { useState } from "react";
import {
  Alert,
  KeyboardAvoidingView,
  Modal,
  Platform,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from "react-native";

const Pelanggan = [
  { nama: "Jason", password: "t" },
];

export default function LoginScreen() {
  const [nama, setNama] = useState("");
  const [password, setPassword] = useState("");
  const [showModal, setShowModal] = useState(false); 
  const router = useRouter();

  const handleLogin = () => {
    const pengguna = Pelanggan.find(
      (x) => x.nama === nama && x.password === password
    );
    if (pengguna) {
      Alert.alert("Selamat", "Anda berhasil login", [
        { text: "OK", onPress: () => router.push("/Operation") }, 
      ]);
    } else {
      setShowModal(true); 
    }
  };

  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === "ios" ? "padding" : undefined}
    >
      <ScrollView contentContainerStyle={style.container}>
        <Text style={style.text}>Login Page</Text>

        <TextInput
          style={style.input}
          placeholder="Nama"
          onChangeText={setNama}
          value={nama}
        />
        <TextInput
          style={style.input}
          placeholder="Password"
          secureTextEntry
          onChangeText={setPassword}
          value={password}
        />

        <TouchableOpacity style={style.button} onPress={handleLogin}>
          <Text style={style.buttonText}>Login</Text>
        </TouchableOpacity>

        <Modal
          animationType="slide"
          transparent={true}
          visible={showModal}
          onRequestClose={() => setShowModal(false)}
        >
          <View style={style.modalOverlay}>
            <View style={style.modalContent}>
              <Text style={style.modalTitle}>Login Gagal!</Text>
              <Text style={{ marginBottom: 20 }}>Nama atau password salah.</Text>
              <TouchableOpacity onPress={() => setShowModal(false)}>
                <Text style={style.modalCloseText}>Tutup</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const style = {
  container: {
    flexGrow: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#f5f5f5"
  },
  text: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 20
  },
  input: {
    width: "100%",
    height: 50,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    paddingHorizontal: 15,
    marginBottom: 15,
    backgroundColor: "#fff"
  },
  button: {
    backgroundColor: "#007AFF",
    paddingVertical: 15,
    borderRadius: 8,
    width: "100%"
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
    textAlign: "center"
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center"
  },
  modalContent: {
    backgroundColor: "#fff",
    padding: 25,
    borderRadius: 10,
    width: "80%",
    alignItems: "center"
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10
  },
  modalCloseText: {
    color: "#007AFF",
    fontWeight: "bold",
    fontSize: 16
  }
};

//create-account.jsx
import React, { useState } from 'react';
import { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';

export default function createAccount() {
  const [emailOrPhone, setEmailOrPhone] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const handleSignup = () => {
    if (!emailOrPhone || !password || !confirmPassword) {
      Alert.alert('Error', 'Semua kolom harus diisi.');
      return;
    }

    if (password !== confirmPassword) {
      Alert.alert('Error', 'Password dan konfirmasi tidak cocok.');
      return;
    }

    Alert.alert('Berhasil', 'Akun berhasil dibuat (dummy).');
  };

  const handleGoogleLogin = () => {
   
    Alert.alert('Login Google', 'Login dengan Google (dummy).');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Buat Akun</Text>

      <TextInput
        style={styles.input}
        placeholder="Email atau Nomor Telepon"
        onChangeText={setEmailOrPhone}
        value={emailOrPhone}
        keyboardType="email-address"
        autoCapitalize="none"
      />

      <TextInput
        style={styles.input}
        placeholder="Password"
        onChangeText={setPassword}
        value={password}
        secureTextEntry
      />

      <TextInput
        style={styles.input}
        placeholder="Konfirmasi Password"
        onChangeText={setConfirmPassword}
        value={confirmPassword}
        secureTextEntry
      />

      <TouchableOpacity style={styles.signupButton} onPress={handleSignup}>
        <Text style={styles.signupText}>Daftar</Text>
      </TouchableOpacity>

      <Text style={styles.orText}>Atau</Text>

      <TouchableOpacity style={styles.googleButton} onPress={handleGoogleLogin}>
        <Text style={styles.googleText}>Login dengan Google</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 30,
  },
  input: {
    height: 50,
    borderColor: '#aaa',
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 15,
    marginBottom: 15,
  },
  signupButton: {
    backgroundColor: '#2196F3',
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 10,
  },
  signupText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: '600',
    fontSize: 16,
  },
  orText: {
    textAlign: 'center',
    marginVertical: 20,
    color: '#555',
  },
  googleButton: {
    borderWidth: 1,
    borderColor: '#888',
    paddingVertical: 12,
    borderRadius: 8,
  },
  googleText: {
    textAlign: 'center',
    color: '#444',
    fontWeight: '600',
    fontSize: 16,
  },
});
